<?php

require __DIR__ . '/vendor/autoload.php';

use splitbrain\phpcli\CLI;
use splitbrain\phpcli\Options;
use Symfony\Component\Dotenv\Dotenv;

class Sarps extends CLI
{
    protected $appDirectory = __DIR__.'/app';
    protected $libDirectory = __DIR__.'/lib';

    public function __construct()
    {
        parent::__construct();
        $dotenv = new Dotenv();
        $dotenv->load(__DIR__.'/.env');
    }

    protected function setup(Options $options)
    {
        $options->setHelp('A very minimal example that does nothing but print a version');
        $options->registerOption('version', 'print version', 'v');

        $options->registerCommand('make', 'Scaffold a new mailer app');
        $options->registerArgument('class', 'The name of the new app to scaffold.', true, 'make');

        $options->registerCommand('run', 'Run an existing mailer app');
        $options->registerArgument('class', 'The name of the app to run', true, 'run');
        $options->registerOption('bulk', 'Send email to all users in "$address" or as provided by "getAddress($index)"', 'b', null, 'run');
        $options->registerOption('mail', 'Mail address to send to. Ignored if -b flag is set.', 'm', 'mail', 'run');
    }

    protected function main(Options $options)
    {
        if ($options->getOpt('version')) {
            return $this->info('1.0.0');
        }
        switch ($options->getCmd()) {
            case 'make':
                $this->makeCommand($options);
                break;
            case 'run':
                $this->runCommand($options);
                break;
            default:
                $this->error('No known command was called, we show the default help instead:');
                echo $options->help();
                exit;
        }

    }

    protected function makeCommand(Options $options)
    {
        $args = $options->getArgs();
        foreach ($args as $arg) {
            if (file_exists("{$this->appDirectory}/{$arg}.php")) {
                $this->error("App '{$arg}' already exists");
                continue;
            }
            $res = $this->copyTemplate(
                "{$this->libDirectory}/Template.php", 
                "{$this->appDirectory}/{$arg}.php", 
                array('AppTemplate' => $arg)
            );
            $this->success("'{$arg}' app scaffolded in '{$this->appDirectory}'");
        }
    }

    public function runCommand(Options $options)
    {
        $arg = $options->getArgs();
        if (count($arg) > 1) {
            $this->error("You cannot execute multiple apps simoultaneously: " . implode($arg, ','));
            return;
        }
        $arg = $arg[0];

        $className = "App\\{$arg}";
        if (!class_exists($className)) {
            $this->error("App '{$arg}' not found");
            return;
        }

        $app = new $className();

        if ($options->getOpt('bulk')) {
            return $app->sendBulkMail();
        }

        $mail = $options->getOpt('mail');
        if ($mail) {
            return $app->sendMail($mail);
        }

    }

    private function copyTemplate($src, $dest, $replaceMap = array())
    {
        $fp = fopen($dest, 'w+') or die();
        $contents = file_get_contents($src);
        foreach ($replaceMap as $key => $value) {
            $contents = str_replace($key, $value, $contents);
        }
        fwrite($fp, $contents);
        fclose($fp);
    }

}

// execute it
$cli = new Sarps();
$cli->run();
